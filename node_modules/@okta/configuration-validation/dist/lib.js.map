{"version":3,"file":"lib.js","sources":["../src/lib.ts"],"sourcesContent":["/*!\n * Copyright (c) 2018-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { OktaAuthOptions as BaseOptions } from '@okta/okta-auth-js';\n\nexport interface TestingOptions {\n  disableHttpsCheck?: boolean;\n}\n\n// Extend options. Many of these are legacy options and subject to deprecation.\nexport interface OktaAuthOptions extends BaseOptions {\n  // legacy: snake case\n  client_id?: string;\n  redirect_uri?: string;\n  response_type?: string;\n\n  // legacy: scopes as a space-separated string\n  scope?: string | string[];\n\n   // hoisted: from tokenManager\n  autoRenew?: boolean;\n  auto_renew?: boolean;\n  storage?: string;\n\n  // used only by this library\n  testing?: TestingOptions;\n}\n\nclass ConfigurationValidationError extends Error {}\n\nconst findDomainURL = 'https://bit.ly/finding-okta-domain';\nconst findAppCredentialsURL = 'https://bit.ly/finding-okta-app-credentials';\n\nconst copyCredentialsMessage = 'You can copy it from the Okta Developer Console ' +\n  'in the details for the Application you created. ' +\n  `Follow these instructions to find it: ${findAppCredentialsURL}`;\n\nconst isHttps = new RegExp('^https://');\nconst hasProtocol = new RegExp('://');\nconst hasDomainAdmin = /-admin.(okta|oktapreview|okta-emea).com/;\nconst endsInPath = new RegExp('/$');\n\nexport const buildConfigObject = (config?: OktaAuthOptions): OktaAuthOptions => {\n  // See all supported options: https://github.com/okta/okta-auth-js#configuration-reference\n  // Support for parameters with an underscore will be deprecated in a future release\n  // camelCase was added 2/11/2019: https://github.com/okta/okta-oidc-js/commit/9b04ada6a01c9d9aca391abf0de3e5ecc9811e64\n  \n  config = config || {}; // accept empty\n\n  // Legacy support: allow a property named 'scope' to be either an array or a string.\n  let scopes = config.scopes;\n  if (!scopes && config.scope) {\n    if (Array.isArray(config.scope)) {\n      scopes = config.scope;\n    } else {\n      scopes = config.scope.split(/\\s+/);\n    }\n  }\n\n  // Legacy support: allow TokenManager config 'autoRenew' and 'storage' to be defined at top-level\n  let tokenManager = config.tokenManager;\n  const autoRenew = ( config.autoRenew !== undefined ? config.autoRenew : config.auto_renew); // Only check legacy property if necessary\n  const storage = config.storage;\n  if (storage !== undefined || autoRenew !== undefined ) {\n    // Properties already defined within the \"tokenManager\" section will not be overwritten\n    tokenManager = Object.assign({\n      autoRenew: autoRenew,\n      storage: storage,\n    }, tokenManager || {});\n  }\n\n  // Legacy support: allow 'responseType' to be a string or an array\n  let responseType = config.responseType || config.response_type;\n  if (typeof responseType === 'string' && responseType.indexOf(' ') >= 0) {\n    responseType = responseType.split(/\\s+/);\n  }\n\n  const normalizedConfig = Object.assign({}, config, {\n    clientId: config.clientId || config.client_id,\n    redirectUri: config.redirectUri || config.redirect_uri,\n    responseType: responseType,\n    scopes: scopes,\n    tokenManager: tokenManager,\n  });\n\n  return normalizedConfig;\n}\n\nexport const assertIssuer = (issuer?: string, testing: TestingOptions = {}): void => {\n  const copyMessage = 'You can copy your domain from the Okta Developer ' +\n    'Console. Follow these instructions to find it: ' + findDomainURL;\n\n  if (testing.disableHttpsCheck) {\n    const httpsWarning = 'Warning: HTTPS check is disabled. ' +\n      'This allows for insecure configurations and is NOT recommended for production use.';\n    /* eslint-disable-next-line no-console */\n    console.warn(httpsWarning);\n  }\n\n  if (!issuer) {\n    throw new ConfigurationValidationError('Your Okta URL is missing. ' + copyMessage);\n  } else if (!testing.disableHttpsCheck && !issuer.match(isHttps)) {\n    throw new ConfigurationValidationError(\n      'Your Okta URL must start with https. ' +\n      `Current value: ${issuer}. ${copyMessage}`\n    );\n  } else if (issuer.match(/{yourOktaDomain}/)) {\n    throw new ConfigurationValidationError('Replace {yourOktaDomain} with your Okta domain. ' + copyMessage);\n  } else if (issuer.match(hasDomainAdmin)) {\n    throw new ConfigurationValidationError(\n      'Your Okta domain should not contain -admin. ' +\n      `Current value: ${issuer}. ${copyMessage}`\n    );\n  }\n};\n\nexport const assertClientId = (clientId?: string): void => {\n  if (!clientId) {\n    throw new ConfigurationValidationError('Your client ID is missing. ' + copyCredentialsMessage);\n  } else if (clientId.match(/{clientId}/)) {\n    throw new ConfigurationValidationError('Replace {clientId} with the client ID of your Application. ' + copyCredentialsMessage);\n  }\n};\n\nexport const assertClientSecret = (clientSecret?: string): void => {\n  if (!clientSecret) {\n    throw new ConfigurationValidationError('Your client secret is missing. ' + copyCredentialsMessage);\n  } else if (clientSecret.match(/{clientSecret}/)) {\n    throw new ConfigurationValidationError('Replace {clientSecret} with the client secret of your Application. ' + copyCredentialsMessage);\n  }\n};\n\nexport const assertRedirectUri = (redirectUri?: string): void => {\n  if (!redirectUri) {\n    throw new ConfigurationValidationError('Your redirect URI is missing.');\n  } else if (redirectUri.match(/{redirectUri}/)) {\n    throw new ConfigurationValidationError('Replace {redirectUri} with the redirect URI of your Application.');\n  }\n};\n\nexport const assertAppBaseUrl = (appBaseUrl?: string): void => { \n  if (!appBaseUrl) { \n    throw new ConfigurationValidationError('Your appBaseUrl is missing.');\n  } else if (appBaseUrl.match(/{appBaseUrl}/)) {\n    throw new ConfigurationValidationError('Replace {appBaseUrl} with the base URL of your Application.');\n  } else if (!appBaseUrl.match(hasProtocol)) {\n    throw new ConfigurationValidationError(`Your appBaseUrl must contain a protocol (e.g. https://). Current value: ${appBaseUrl}.`);\n  } else if (appBaseUrl.match(endsInPath)) {\n    throw new ConfigurationValidationError(`Your appBaseUrl must not end in a '/'. Current value: ${appBaseUrl}.`);\n  } \n};\n"],"names":["__extends","Error","copyCredentialsMessage","isHttps","RegExp","hasProtocol","hasDomainAdmin","endsInPath","appBaseUrl","ConfigurationValidationError","match","clientId","clientSecret","issuer","testing","copyMessage","disableHttpsCheck","console","warn","redirectUri","config","scopes","scope","Array","isArray","split","tokenManager","autoRenew","undefined","auto_renew","storage","Object","assign","responseType","response_type","indexOf","client_id","redirect_uri"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,kBAAA,4DAAkD,kIAAPA,SAAAC,OAKrCC,EAAyB,oLAIzBC,EAAU,IAAIC,OAAO,aACrBC,EAAc,IAAID,OAAO,OACzBE,EAAiB,0CACjBC,EAAa,IAAIH,OAAO,+BAoGE,SAACI,GAC/B,IAAKA,EACH,MAAM,IAAIC,EAA6B,+BAClC,GAAID,EAAWE,MAAM,gBAC1B,MAAM,IAAID,EAA6B,+DAClC,IAAKD,EAAWE,MAAML,GAC3B,MAAM,IAAII,EAA6B,2EAA2ED,OAC7G,GAAIA,EAAWE,MAAMH,GAC1B,MAAM,IAAIE,EAA6B,yDAAyDD,+BAhCtE,SAACG,GAC7B,IAAKA,EACH,MAAM,IAAIF,EAA6B,8BAAgCP,GAClE,GAAIS,EAASD,MAAM,cACxB,MAAM,IAAID,EAA6B,8DAAgEP,+BAIzE,SAACU,GACjC,IAAKA,EACH,MAAM,IAAIH,EAA6B,kCAAoCP,GACtE,GAAIU,EAAaF,MAAM,kBAC5B,MAAM,IAAID,EAA6B,sEAAwEP,yBAxCvF,SAACW,EAAiBC,gBAAAA,MAC5C,IAAMC,EAAc,qIAGpB,GAAID,EAAQE,kBAAmB,CAI7BC,QAAQC,KAHa,wHAMvB,IAAKL,EACH,MAAM,IAAIJ,EAA6B,6BAA+BM,GACjE,IAAKD,EAAQE,oBAAsBH,EAAOH,MAAMP,GACrD,MAAM,IAAIM,EACR,uDACkBI,OAAWE,GAE1B,GAAIF,EAAOH,MAAM,oBACtB,MAAM,IAAID,EAA6B,mDAAqDM,GACvF,GAAIF,EAAOH,MAAMJ,GACtB,MAAM,IAAIG,EACR,8DACkBI,OAAWE,8BAqBF,SAACI,GAChC,IAAKA,EACH,MAAM,IAAIV,EAA6B,iCAClC,GAAIU,EAAYT,MAAM,iBAC3B,MAAM,IAAID,EAA6B,+FA9FV,SAACW,GAQhC,IAAIC,GAHJD,EAASA,GAAU,IAGCC,QACfA,GAAUD,EAAOE,QAElBD,EADEE,MAAMC,QAAQJ,EAAOE,OACdF,EAAOE,MAEPF,EAAOE,MAAMG,MAAM,QAKhC,IAAIC,EAAeN,EAAOM,aACpBC,OAAmCC,IAArBR,EAAOO,UAA0BP,EAAOO,UAAYP,EAAOS,WACzEC,EAAUV,EAAOU,aACPF,IAAZE,QAAuCF,IAAdD,IAE3BD,EAAeK,OAAOC,OAAO,CAC3BL,UAAWA,EACXG,QAASA,GACRJ,GAAgB,KAIrB,IAAIO,EAAeb,EAAOa,cAAgBb,EAAOc,cAajD,MAZ4B,iBAAjBD,GAA6BA,EAAaE,QAAQ,MAAQ,IACnEF,EAAeA,EAAaR,MAAM,QAGXM,OAAOC,OAAO,GAAIZ,EAAQ,CACjDT,SAAUS,EAAOT,UAAYS,EAAOgB,UACpCjB,YAAaC,EAAOD,aAAeC,EAAOiB,aAC1CJ,aAAcA,EACdZ,OAAQA,EACRK,aAAcA"}